import java.awt.*;
import java.awt.image.BufferedImage;
import java.awt.image.MemoryImageSource;
import java.awt.image.PixelGrabber;
import java.io.*;
import javax.imageio.ImageIO;

class Stego {
    public static void main(String[] args) {
        // Initialize variables
        BufferedImage ogImg = null;
        BufferedImage qrCode = null;
        BufferedImage stegoImg = null;
        // Try to read image from file path given
        try {
            ogImg = ImageIO.read(new File(args[0]));
            // TODO: Generate a qr code
            // DUMMY QR CODE, NEED TO HOOK IT UP
            qrCode = ImageIO.read(new File(args[1]));
        } catch (IOException e) {
            System.err.println("Error opening image.");
        }
        // Conversion Process
        // Only converts image to array and back again
        // TODO: Write encode and decode
        try {
            encode(ogImg, qrCode);
            // Decode
        } catch (Exception e) {
            System.err.println("Error merging images.");
        }
    }

    public static BufferedImage encode(BufferedImage ogImg, BufferedImage qrCode) {
        int[] ogPixels = new int[ogImg.getWidth() * ogImg.getHeight()];
        PixelGrabber ogChewer = new PixelGrabber(ogImg, 0, 0, ogImg.getWidth(), ogImg.getHeight(), ogPixels, 0, ogImg.getWidth());
        int[] qrPixels = new int[qrCode.getWidth() * qrCode.getHeight()];
        PixelGrabber qrChewer = new PixelGrabber(qrCode, 0, 0, qrCode.getWidth(), qrCode.getHeight(), qrPixels, 0, qrCode.getWidth());
        int[] stegoPixels = new int[ogImg.getWidth() * ogImg.getHeight()];
        BufferedImage stegoImg = null;
        try {
            ogChewer.grabPixels();
            qrChewer.grabPixels();
        } catch (Exception e) {
            System.err.println("Error in imageToIntArray.");
        }
        // Using pixel data and image dimensions, write the qr code information into the red channel of image
        for (int j = 0; j < ogImg.getHeight(); j++) {
            for (int i = 0; i < ogImg.getWidth(); i++) {
                if ((j < qrCode.getHeight()) && (i < qrCode.getWidth())) {
                    stegoPixels[i * j] = encodeSinglePixel(ogPixels[i * j], qrPixels[i * j]);
                } else {
                    stegoPixels[i * j] = ogPixels[i * j];
                }
            }
        }
        arrayToImage(stegoPixels, ogImg.getWidth(), ogImg.getHeight());
        return stegoImg;
    }

    public static int encodeSinglePixel(int ogPixel, int qrPixel) {
        // Split pixel into separate channels
        int ogAlpha = (ogPixel >> 24) & 0xff;
        int ogRed   = (ogPixel >> 16) & 0xff;
        int ogGreen = (ogPixel >> 8) & 0xff;
        int ogBlue = (ogPixel) & 0xff;
        int qrRed = (qrPixel >> 16) & 0xff;
        // Convert pixel int values to binary
        String ogRedBits = Integer.toBinaryString(ogRed);
        String ogBlueBits = Integer.toBinaryString(ogBlue);
        String ogGreenBits = Integer.toBinaryString(ogGreen);
        String qrRedBits = Integer.toBinaryString(qrRed);
        // Check if the qr pixel is black or white, otherwise throw error
        // Append a 1 or 0 to the new pixel, depending on the qr code pixel value
        String newPixelRedBits = blackOrWhiteMerge(ogRedBits, qrRedBits);
        String newPixelBlueBits = blackOrWhiteMerge(ogBlueBits, qrRedBits);
        String newPixelGreenBits = blackOrWhiteMerge(ogGreenBits, qrRedBits);
        // Convert pixel binary values to int
        int newPixelRed = Integer.parseInt(newPixelRedBits,2);
        int newPixelBlue = Integer.parseInt(newPixelBlueBits,2);
        int newPixelGreen = Integer.parseInt(newPixelGreenBits,2);
        // Combine separate channels into a pixel
        return ((ogAlpha << 24) | (newPixelRed << 16) | (newPixelGreen << 8) | (newPixelBlue));
    }

    public static String blackOrWhiteMerge(String ogPixelBits, String qrPixelBits) {
        StringBuilder sb = new StringBuilder();
        sb.append(ogPixelBits);
        // Leading zeros aren't always included, this loop will correct that
        while (sb.length() <= 8) {
            sb.insert(0, '0');
        }
        ogPixelBits = sb.toString();
        sb.setLength(0);
        if (qrPixelBits.equals("11111111")) {
            sb.append(ogPixelBits.substring(0,8));
            sb.append(1);
        } else if (qrPixelBits.equals("0")) {
            sb.append(ogPixelBits.substring(0,8));
            sb.append(0);
        } else {
            System.err.println("Corrupted QR data detected.");
        }
        return sb.toString();
    }

    /***
     * Convert array of pixels into a BufferedImage
     *
     * @param ogPixels
     * @param width
     * @param height
     */
    public static void arrayToImage(int[] ogPixels, int width, int height) {

        MemoryImageSource imgSrc = new MemoryImageSource(width, height, ogPixels, 0, width);
        Image imgRaw = Toolkit.getDefaultToolkit().createImage(imgSrc);
        BufferedImage newImg = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        newImg.getGraphics().drawImage(imgRaw, 0, 0, null);
        try {
            ImageIO.write(newImg, "jpg", new File("stegoImg.jpg"));
        } catch (IOException e) {
            System.err.println("Error in arrayToImage.");
        }
    }
}